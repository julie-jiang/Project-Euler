'''
P26 Reciprocal Cycles
    A unit fraction contains 1 in the numerator. The decimal representation of 
    the unit fractions with denominators 2 to 10 are given:
        1/2	= 	0.5
        1/3	= 	0.(3)
        1/4	= 	0.25
        1/5	= 	0.2
        1/6	= 	0.1(6)
        1/7	= 	0.(142857)
        1/8	= 	0.125
        1/9	= 	0.(1)
        1/10	= 	0.1
    Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. 
    It can be seen that 1/7 has a 6-digit recurring cycle.

    Find the value of d < 1000 for which 1/d contains the longest recurring 
    cycle in its decimal fraction part.
'''
from decimal import *
getcontext().prec = 3000 # Set decimal precision

def answer():
    max_length = 0
    max_length_d = None
    for d in range(2, 1000):
        length = digit_recurring_cycle(d)
        if length > max_length:
            max_length, max_length_d = length, d
    return max_length_d
        
def digit_recurring_cycle(d):
    number = Decimal(1) / Decimal(d)
    number = str(number)
    if len(number) < 10:
        return 0 # decimal is non-recurring
    seen = ''
    number = number[:-1] # cut off last digit to avoid errors due to rounding
    for i in range(2, len(number) - 1):
        if number[i] + number[i + 1] in seen:
            # check two digits at a time to improve accuracy
            j = seen.index(number[i] + number[i + 1]) 
            if check_recurrence(number[i:], seen[j:], d, number):
                return len(seen[j:])
            else:
                seen += (number[i])
        else:
            seen += (number[i])
    return 0 
def check_recurrence(decimals, recur_cycle, d, number):
    i = 0
    # if recurring cycle is two of the same digit, remove one of them
    if len(recur_cycle) == 2 and recur_cycle[0] == recur_cycle[1]:
        recur_cycle = recur_cycle[0]
    for n in range(2): # check twice
        for j in range(len(recur_cycle)):
            try:
                if recur_cycle[j] != decimals[i]:
                    return False
                i += 1
            except IndexError: # because recurring cycle is too long
                if i >  10:
                    return True
    return True
            
if __name__ == '__main__':
    print answer() # 983